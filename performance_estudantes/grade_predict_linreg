import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.preprocessing import OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.linear_model import LinearRegression
from sklearn.metrics import r2_score, mean_squared_error

def main():
    # Carregar os dados
    df1 = pd.read_csv("student-mat.csv", sep=";")
    df2 = pd.read_csv("student-por.csv", sep=";")
    student_df = pd.concat([df1, df2], axis=0)

    # Separar features e target
    X = student_df.drop(["G3"], axis=1)
    y = student_df["G3"]  # nota final

    # Colunas categóricas
    categorical_cols = ["school", "sex", "address", "famsize", "Pstatus", "Mjob", "Fjob", "reason", "guardian", "schoolsup", "famsup", "paid", "activities", "nursery", "higher", "internet", "romantic"]
    ct = ColumnTransformer(transformers=[("encoder", OneHotEncoder(), categorical_cols)], remainder="passthrough")
    X = ct.fit_transform(X)

    # Feature scaling
    sc = StandardScaler()
    X = sc.fit_transform(X)

    # Dividir os dados em treino e teste
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)

    # Regressão linear
    regressor = LinearRegression()

    # GridSearch para encontrar os melhores hiperparâmetros
    parameters = {'fit_intercept': [True, False]}  # Apenas 'fit_intercept' como parâmetro ajustável
    grid_search = GridSearchCV(regressor, parameters, cv=5, scoring='neg_mean_squared_error')
    grid_search.fit(X_train, y_train)

    # Melhor modelo
    best_regressor = grid_search.best_estimator_

    # Imprimir os melhores parâmetros
    print("\nMelhores hiperparâmetros encontrados:")
    print(grid_search.best_params_)

    # Predição
    y_pred = best_regressor.predict(X_test)

    # Avaliar o modelo
    print("\nR2 Score:", r2_score(y_test, y_pred))
    print("Mean Squared Error:", mean_squared_error(y_test, y_pred))

if __name__ == "__main__":
    main()
